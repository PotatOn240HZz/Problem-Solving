{"id":452337011,"lang":"cpp","time":"1 year, 6 months","timestamp":1612523464,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/452337011/","is_pending":"Not Pending","title":"Simplify Path","memory":"10.5 MB","code":"class Solution {\npublic:\n    string simplifyPath(string path) {\n        int n=path.length();\n        stack<string>s;\n                \n        if(path[n-1]!='/') // so that initially path always ends with '/'\n            path+=\"/\", ++n;\n            \n        int i=1; // since path always starts from '/'\n        string ans=\"\";\n        string temp=\"\";\n        while(i<n){\n            \n            if(path[i]=='/'){ // check only if we encounter '/'\n                \n                if(temp==\"\" || temp==\".\"){\n                    // ignore\n                }\n                else if(temp==\"..\"){\n                    if(!s.empty()) s.pop(); // pop the top element from stack if exists\n                }\n                else{\n                    s.push(temp); //push the directory or file name to stack\n                }\n                \n                temp=\"\"; // reset temp\n            }\n            else{\n                temp.push_back(path[i]); // else append to temp\n            }\n            \n            ++i; // increment index\n        }\n        \n        while(!s.empty()){ // add all the stack elements\n            ans=\"/\"+s.top()+ans;\n            s.pop();\n        }\n        \n        if(ans.length()==0) // if no directory or file is present\n            ans=\"/\"; // minimum root directory must be present in ans\n        \n        return ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"simplify-path"}