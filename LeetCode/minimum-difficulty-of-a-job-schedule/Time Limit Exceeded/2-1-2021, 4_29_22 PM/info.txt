{"id":450599083,"lang":"cpp","time":"1 year, 6 months","timestamp":1612189762,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/450599083/","is_pending":"Not Pending","title":"Minimum Difficulty of a Job Schedule","memory":"N/A","code":"\nclass Solution {\npublic:\n    int minDifficulty(vector<int>& jobDifficulty, int d) {\n        if(jobDifficulty.size()<d)\n            return -1;\n        if(jobDifficulty.size()==d)\n        {\n            int sum=0;\n            for(int i=0;i<jobDifficulty.size();i++)\n                sum+=jobDifficulty[i];\n            return sum;\n        }\n        if(d==1)\n        {\n            int max=jobDifficulty[0];\n            for(int i=1;i<jobDifficulty.size();i++)\n                if(max<jobDifficulty[i])\n                    max=jobDifficulty[i];\n            return max;\n        }\n        \n        vector <int> range;\n        vector <int> maxes;\n        vector <int> binary;\n        range.resize(d);\n        maxes.resize(d+1);\n        binary.resize(d+1,1);\n        maxes[d]=-1;\n        range[0]=0;\n        binary[0]=1;\n        binary[d]=d;\n            for(int j=d-1;jobDifficulty.size()*jobDifficulty.size()!=binary[d] && j>=0;j--)\n            {\n                if(binary[j]!=jobDifficulty.size()-d+1)\n                {\n                    binary[j]++;\n                    binary[d]++;\n                    for(int k=j+1;k<binary.size()-1;k++)\n                    {\n                        binary[d]-=binary[k]-1;\n                        binary[k]=1;\n                    }\n                    j=binary.size()-1;\n                    if(binary[d]==jobDifficulty.size())\n                    {\n                        int range2=binary[d];\n                        for(int i=range.size()-1;i>=0;i--)\n                        {\n                            range[i]=range2-binary[i];\n                            range2=range[i];\n                        }\n\n\n                        for(int i=0;i<range.size();i++)\n                        {\n                            if(i==0)\n                            {\n                                int tempMax=jobDifficulty[0];\n                                for(int j=1;j<range[i+1];j++)\n                                        if(tempMax < jobDifficulty[j])\n                                            tempMax=jobDifficulty[j];\n                                maxes[0]=tempMax;\n                            }\n                            else if(i == range.size()-1)\n                            {\n                                int tempMax=jobDifficulty[range[i]];\n                                for(int j=range[i]+1;j<jobDifficulty.size();j++)    \n                                        if(tempMax < jobDifficulty[j])\n                                            tempMax=jobDifficulty[j];\n                                maxes[maxes.size()-2]=tempMax;\n                            }\n                            else\n                            {\n                                int tempMax=jobDifficulty[range[i]];\n                                for(int j=range[i]+1;j<range[i+1];j++)\n                                        if(tempMax < jobDifficulty[j])\n                                            tempMax=jobDifficulty[j];\n                                maxes[i]=tempMax;\n                            }\n                        }\n\n\n                        int sum=0;\n                        for(int j=0;j<maxes.size()-1;j++)\n                            sum+=maxes[j];\n                        if(sum<maxes[maxes.size()-1] || maxes[maxes.size()-1]==-1)\n                            maxes[maxes.size()-1]=sum;\n                    }\n               }\n            }\n        return maxes[maxes.size()-1];\n    }\n};\n        /*\n        int row;\n        int max;\n        int t;\n        for(int i=0;i<jobDifficulty.size()-1-d;i++)\n        {\n            int temp;\n            int tempMax=jobDifficulty[i];\n            for(int j=i;j<i+d;j++)\n            {\n                if(tempMax < jobDifficulty[j])\n                    tempMax=jobDifficulty[j];\n                temp+=jobDifficulty[j];\n            }\n            if(temp<row || i==0)\n            {\n                row=temp;\n                max=tempMax;\n                t=i;\n            }\n        }\n        ans1=max;\n        \n        \n        for(int i=0;i<t;i++)\n            int temp;\n            int tempMax=jobDifficulty[i];\n            for(int j=i;j<i+d;j++)\n            {\n                if(tempMax < jobDifficulty[j])\n                    tempMax=jobDifficulty[j];\n                temp+=jobDifficulty[j];\n            }\n            if(temp<row || i==0)\n            {\n                row=temp;\n                max=tempMax;\n                t=i;\n            }\n            */","compare_result":"11111111000000000000000000000000","title_slug":"minimum-difficulty-of-a-job-schedule"}