{"id":453609751,"lang":"cpp","time":"1 year, 5 months","timestamp":1612788122,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/453609751/","is_pending":"Not Pending","title":"Peeking Iterator","memory":"7.5 MB","code":"/*\n * Below is the interface for Iterator, which is already defined for you.\n * **DO NOT** modify the interface for Iterator.\n *\n *  class Iterator {\n *\t\tstruct Data;\n * \t\tData* data;\n *\t\tIterator(const vector<int>& nums);\n * \t\tIterator(const Iterator& iter);\n *\n * \t\t// Returns the next element in the iteration.\n *\t\tint next();\n *\n *\t\t// Returns true if the iteration has more elements.\n *\t\tbool hasNext() const;\n *\t};\n */\n\nclass PeekingIterator : public Iterator {\npublic:\n\tPeekingIterator(const vector<int>& nums) : Iterator(nums) {\n        m_has_next = Iterator::hasNext();\n\t    if (m_has_next) \n            m_next = Iterator::next();\n\t}\n\t\n\tint peek() {\n        return m_next;\n\t}\n\t\n\tint next() {\n\t    int temp = m_next;\n        m_has_next = Iterator::hasNext();\n        if (m_has_next) m_next = Iterator::next();\n        return temp;\n\t}\n\t\n\tbool hasNext() const {\n\t    return m_has_next;\n\t}\n    \nprivate:\n    int m_next;\n    bool m_has_next;\n};","compare_result":"1111111111111","title_slug":"peeking-iterator"}